/** * @author  *//// #if SupportIE6// IE 6/7 无法处理外容器自动适应内容器的大小。// 所以为 IE 6/7 手动设置 width 。/* 最新消息: IE6 即将退出历史舞台。退出的还有这一堆的代码,一 */if(navigator.isQuirks && false){		ContentControl.implement({				ie_autoResize: function(){								}			});		/**	 * @internal	 * @param {Class} control 控件类。	 * @param {String} containerName 用于包装 content 的属性，这个属性将会自动调整大小为子元素的大小。	 * @param {Function} getWidthForResize 需要自动调整大小时，调用此函数计算新的大小，并设置containerName 指定的 元素大小为该大小。	 */	ContentControl.registerAutoResizerForIE = function (control,  containerName, getWidthForResizing) {				var p = control.prototype;				Object.extend(p, {						setWidthWithoutResizing: p.setWidth,						getWidthForResizing: getWidthForResizing,						setWidth: function (value) {				var me = this;				me[containerName].runtimeStyle.width = '';				if(isNaN(value)){					// 如果 是 NaN， 说明重新设置为自定义的大小。					me[containerName].runtimeStyle.width = getWidthForResizingAndTestMinMaxWidth(me,  me[containerName]);				}				return me.setWidthWithoutResizing(value);			}					}) ;				// 当执行 setText/setHtml 后 ， 重新更新容器 (containerName) 宽度。		Object.map('setText setHtml', function (method) {			var old = p[method];			p[method] = function (value) {				var me = this, styleWidth;				p.call(me, value);				styleWidth = me[containerName].style.width;				if(!styleWidth ||  styleWidth === 'auto') {					setTimeout(function(){						var style = me[containerName].runtimeStyle;						style.width = '';						style.width = getWidthForResizingAndTestMinMaxWidth(me, me[containerName]);					}, 0);				}				return me;			};		});				function getWidthForResizingAndTestMinMaxWidth(target, elem){			return Math.max(Math.min(target.getWidthForResizing(), Dom.styleNumber(elem, 'maxWidth') || Infinity), Dom.styleNumber(elem, 'minWidth'));		}	};		ContentControl.registerAutoResizerForIE(ContentControl, 'dom', function () {		return this.container.getSize().x;	});}/// #endif