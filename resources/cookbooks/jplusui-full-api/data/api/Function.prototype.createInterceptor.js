jsonp({"fullName":'Function.prototype.createInterceptor',"source":'System\\Lang\\assets\\scripts\\Function.js',"sourceFile":'data/source/System\\Lang\\assets\\scripts\\Function.js.html#Function-prototype-createInterceptor',"summary":'<p>Creates an interceptor function. The passed function is called before the original one. If it returns false,\nthe original one is not called. The resulting function returns the results of the original function.\nThe passed function is called with the parameters of the original function. Example usage:</p>\n\n<p>var sayHi = function(name){\nalert(\'Hi, \' + name);\n}</p>\n\n<p>sayHi(\'Fred\'); // alerts \"Hi, Fred\"</p>\n\n<p>// create a new function that validates input without\n// directly modifying the original function:\nvar sayHiToFriend = Ext.Function.createInterceptor(sayHi, function(name){\nreturn name == \'Brian\';\n});</p>\n\n<p>sayHiToFriend(\'Fred\');  // no alert\nsayHiToFriend(\'Brian\'); // alerts \"Hi, Brian\"</p>\n',"params":[{"type":'Function',"name":'origFn',"summary":'<p>The original function.</p>\n'},{"type":'Function',"name":'newFn',"summary":'<p>The function to call before the original</p>\n'},{"type":'Object',"name":'scope',"summary":'<p>(optional) The scope (<code>this</code> reference) in which the passed function is executed.\n<strong>If omitted, defaults to the scope in which the original function is called or the browser window.</strong></p>\n'},{"type":'Mixed',"name":'returnValue',"summary":'<p>(optional) The value to return if the passed function return false (defaults to null).</p>\n'}],"returns":{"type":'Function',"summary":'<p>The new function</p>\n'},"name":'createInterceptor',"memberOf":'Function',"memberType":'method'});