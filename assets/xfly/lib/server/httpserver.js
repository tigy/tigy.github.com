var Http = require('http'),	Path = require('path'),	Url = require('url'),	Util = require('util'),	HttpApplication = require('./httpapplication'),	HttpContext = require('./httpcontext'),	DefaultHttpWorkerRequest = require('./defaulthttpworkerrequest');/** * 表示一个 Http 服务器。 * @class */function HttpServer(){	HttpApplication.apply(this, arguments);	HttpServer.current = this;	var server = this.socket = new Http.Server(function(request, response){		var wr = new DefaultHttpWorkerRequest(request, response, application);		application.processRequest(new HttpContext(wr));	});		var application =  this;		server.on('error', function(e){		if (e.code == 'EADDRINUSE') {			application.error('[Error]Cannot create server on port ' + application.port + (application.address && application.address !== '0.0.0.0' ? ' of ' + application.address : ''));		} else {			application.error(e);		}	});		server.on('listening', function(){		this.isListening = true;		var addr = this.address();		application.address = addr.address;		application.port = addr.port;		application.onApplicationStart();				application.log("[info]Server running at " + application.rootUrl);	});		server.on('close', function(){		this.isListening = false;		application.onApplicationStop();		application.log("[info]Server stopped at " + application.rootUrl);	});}HttpServer.prototype = {	__proto__: HttpApplication.prototype,	log: function(e){		console.log(e);	},		error: function(e){		console.error(e);	},		/**	 * 启动当前服务器。	 */	start: function(callback){		this.socket.listen(this.port, this.address, 511, callback && callback.bind(this));	},		/**	 * 停止当前应用程序池管理的全部服务器。	 */	stop: function(callback){		this.socket.close(callback && callback.bind(this));	},		/**	 * 重启当前应用程序池管理的全部服务器。	 */	restart: function(){		this.stop(this.start);	},		/**	 * 使用当前服务器处理指定的请求。	 */	process: function(httpWorkerRequest){		this.processRequest(new HttpContext(httpWorkerRequest));	}	};module.exports = HttpServer;