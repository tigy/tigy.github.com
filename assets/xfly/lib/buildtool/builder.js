	var Http = require('http'),	Path = require('path'),	Url = require('url'),	FS = require('fs'),	Util = require('util'),	IO = require('io');/** * 文件发布工具。 */function Builder(configs){	this.extensions = {};		this.loadConfigs(configs);}function loadBuilder(name){	if(!name){		return null;	}		name = require(Configs.path.builders + name);			return name;}function extend(dest, src){	for(var key in src){		dest[key] = src[key];	}		return dest;}Builder.prototype = {	from: null,		to: null,		fromEncoding: "utf-8",		toEncoding: "utf-8",		error: function(){		},		log: function(){		},		ignore: function(path){		},		/**	 * 不同文件的拷贝方式。	 */	extensions: {		".ai": "-",		".psd": "-",		".config": "-",		".tmp": "-",		"*": function(){				}	},		map: {		"assets/share/a.css": "assets/share/b.css"	},		getMap: function(){		if(this._map){			return this._map;		}				var c = [];		for(var from in this.map){			c.push({				from: new RegExp(from, "i"),				to: this.map[from],				"continue": !/^\^|\$$/.test(from)			});		}	},	loadConfigs: function(configs){				// 拷贝配置到当前对象。		for(var key in configs){			var value = configs[key];			if(typeof value === 'object' && value) {				this[key] = extend(extend({}, this[key]), value);			} else {				this[key] = value;			}		}			},		/**	 * 获取一个路径发布后的新路径。	 * @param {String} path 需要发布的路径。	 * @return {String} 发布之后的路径。	 */	getTargetPath: function(path){		for(var i = 0; i < this._map.length; i++){			var d = this._map[i];						if(d.from.test(path)){								if(!d.to){					return null;				}							path = path.replace(d.from, d.to);								if(!d["continue"]){					return path;				}			}		}				return path;	},		toPath: function(path, root){		if(path.charAt(0) == '/'){			return path;		}				return Path.relative(root, path);	},		toPhysicalPath: function(path, root){		if(path.charAt(0) == '/'){			return Path.normalize(root + path);		}			return path;	},		/**	 * 发布单一的文件或文件夹。	 */	buildSingle: function(path){				path = this.toPhysicalPath(path, this.from);			if(IO.exitsDir(path)){			this.buildDir(path);		} else if(IO.exitsFile(path)){			this.buildFile(path);		} else {			this.ignore(path, "Not a file or directory");		}		},		buildDir: function(path){		var files = IO.getFiles(path);				for(var i = 0 ; i < files.length; i++){			this.buildFile(files[i]);		}	},		/**	 * 发布单一的文件。	 */	buildFile: function(path){				path =  this.toPath(path, this.from);				var newPath =  this.getTargetPath(path);				this.buildFileWithHandlers(path, newPath);		},	buildFileWithHandlers: function(from, to){				if(!to){			this.ignore(path, "Deny Target Path");			return;		}			to = this.toPhysicalPath(to, this.to);		from = this.toPhysicalPath(from, this.from);				var ext = Path.extname(from);				var builder = this.extensions[ext];				if(builder){			builder.build(from, to, this);		} else {			this.ignore(from, "Missing Builder");		}			},};function pathToRelative(path, basePath){	}